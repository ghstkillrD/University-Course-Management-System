version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: ucms-postgres-prod
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-ucms}
      - POSTGRES_USER=${DATABASE_USERNAME:-ucms_user}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-secure_production_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ucms-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-ucms_user} -d ${DATABASE_NAME:-ucms}"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: ucms-backend-prod
    environment:
      - DATABASE_URL=jdbc:postgresql://postgres:5432/${DATABASE_NAME:-ucms}
      - DATABASE_USERNAME=${DATABASE_USERNAME:-ucms_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-secure_production_password}
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-change-this-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://your-domain.com,https://www.your-domain.com}
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ucms-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data_prod:
    driver: local

networks:
  ucms-network-prod:
    driver: bridge
